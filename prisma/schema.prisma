// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  comment Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid())
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Tag {
  id String @id @default(cuid())
  name String @unique
  Posts Post[]
}

model Post {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String   @db.Text
  descMD       String   @db.Text
  thumbImgUrl  String?
  view         Int      @default(0)
  likes        Int
  userEmail    String
  catSlug      String
  imgUrls      String[]
  dateUploaded DateTime @default(now())
  dateUpdated  DateTime @updatedAt

  tags Tag[]
  user User     @relation(fields: [userEmail], references: [email])
  cat  Category @relation(fields: [catSlug], references: [slug])


  comments Comment[]
}

model Comment {
  id String @id @default(cuid())
  desc String
  userEmail String
  postSlug String
  createdAt DateTime @default(now())

  user User     @relation(fields: [userEmail], references: [email])
  post  Post @relation(fields: [postSlug], references:[slug])
}